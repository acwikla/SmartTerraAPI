@page "/"

@using SmartTerraWebApp.Data
@using SmartTerraAPI.DTO
@using SmartTerra.Core.DTO;

<style>
    tbody {
        color: dimgray;
    }

    label {
        min-width: 130px;
    }

    h5 {
        color: dimgray;
        display: block;
        font-size: 1.17em;
        margin-top: 1em;
        margin-bottom: 1em;
        margin-left: 0;
        margin-right: 0;
    }
</style>

@if (!logInSuccess)
{
    <h4 style="color: indigo;">Welcome to SmartTerraWebApp!</h4>
    <h5>Please, log in!</h5>
    <input placeholder="Email address" type="email" value="@email" @onchange="@((ChangeEventArgs __e) => email =__e.Value.ToString())" />
    <br />
    <input placeholder="Password" type="password" value="@password" @onchange="@((ChangeEventArgs __e) => password =__e.Value.ToString())" />
    <br />
    <br />
    <button type="button" class="btn btn-outline-info btn-sm" @onclick="LogIn">Log in</button>
    <br />
    <br />
    @if (returnMessage == "Error")
    {
        <div class="alert alert-secondary" role="alert">
            <p>Sorry, problem occurred!</p>
            <p>Please check if all the data has been entered.</p>
        </div>
    }
    @if (returnMessage == "Bad Request")
    {
        <div class="alert alert-danger" role="alert">
            <p>Error occurred!</p>
            <p>Invalid email address or password!</p>
        </div>
    }
}
@if (logInSuccess)
{
    <h4 style="color: indigo;">Hello @user.Login!</h4><p></p>
    if (devicesDTO != null)
    {
        <h6>Choose your device,</h6>
        @if (!fetchDeviceFlag)
        {
            <button type="button" class="btn btn-outline-info btn-sm" @onclick="FetchDevice">Fetch device</button>
            <br />
            <br />
        }
        else if (fetchDeviceFlag)
        {
            <select value="@choosenDevice.Id" @onchange="((ChangeEventArgs __e) => choosenDevice.Id = int.Parse(__e.Value.ToString()))">
                <option value="" hidden>Select device</option>
                @foreach (var dev in devicesDTO)
                {
                    <option value="@dev.Id">@dev.Name</option>
                }
            </select>
            <br />
            <button type="button" class="btn btn-outline-info btn-sm" @onclick="ChooseDevice">Choose device</button>
            <br />
            <br />
        }
        <h6>or add a new one.</h6>
        @if (!addDeviceFlag)
        {
            <button type="button" class="btn btn-outline-info btn-sm" @onclick="AddDevice">Add device</button><p></p>
            <br />
        }
    }
    else
    {
        <div class="alert alert-secondary" role="alert">
            <p>Sorry, problem occurred!</p>
            <p>You don't have any devices.</p>
        </div>
        <p>You can create new one now.</p>
        <div class="input-group input-group-sm mb-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="inputGroupSelect03">Name</label>
                <input type="text" @onchange="@((ChangeEventArgs __e) => device.Name = __e.Value.ToString())" />
            </div>
        </div>
        <button type="button" class="btn btn-outline-info btn-sm" @onclick="PostDevice">Add device</button><p></p>
        <br />
    }

    @if (addDeviceFlag)
    {
        <div class="input-group input-group-sm mb-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="inputGroupSelect03">Name</label>
                <input value="@newDeviceName" type="text" @onchange="@((ChangeEventArgs __e) => newDeviceName = __e.Value.ToString())" />
            </div>
        </div>
        <button type="button" class="btn btn-outline-info btn-sm" @onclick="PostDevice">Add device</button><p></p>
        <br />
    }

    <table class="table table-sm">
        <thead>
            <tr>
                <th>Summary</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td scope="row">Current chosen device</td>
                @if (@choosenDevice.Name == null)
                {
                    <td> No device was selected.</td>
                }
                else
                {
                    <td>@choosenDevice.Name with ID: @choosenDevice.Id </td>
                }
            </tr>
            <tr>
                <td scope="row">Device action status</td>
                @if (reasonPhrase == "Bad Request")
                {
                    <td>
                        <p>Error occurred!</p>
                        <p>Please check if all data has been entered.</p>
                    </td>
                }
                else if (reasonPhrase == "Created")
                {
                    <td>
                        <p>Device has been successfully added!</p>
                    </td>
                }
                else
                {
                    <td>No action was taken.</td>
                }
            </tr>
        </tbody>
    </table>
}

@if (logInSuccess)
{
    <br />
    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="LogOut">Log out</button>
}





@code{
    static int deviceId;
    string email, password;
    public static bool logInSuccess = false;
    DeviceDTO[] devicesDTO = new DeviceDTO[] { };
    DeviceAddDTO device = new DeviceAddDTO() { };
    bool addDeviceFlag = false, fetchDeviceFlag = false;
    public static UserDTO user = new UserDTO() { };
    UserService userService = new UserService();
    string returnMessage, newDeviceName = "";
    public static DeviceDTO choosenDevice = new DeviceDTO() { };
    HttpResponseMessage responseMessage;
    string contentValue = "", reasonPhrase = "";
    UserToLogInDTO userToLogIn = new UserToLogInDTO() { };

    public async Task LogIn()
    {
        returnMessage = "";

        if (email == null || email == ""|| password == null || password == "")
        {
            returnMessage = "Error";
            return;
        }

        userToLogIn.Email = email;
        userToLogIn.Password = password;

        user = await userService.LogIn(userToLogIn);
        if (user== null)
        {
            returnMessage = "Bad Request";
            return;
        }
        logInSuccess = true;
        devicesDTO = await userService.GetDevices(user.Id);
        email = "";
    }

    public void LogOut()
    {
        logInSuccess = false;
        devicesDTO = new DeviceDTO[] { };
        user = new UserDTO() { };
        choosenDevice = new DeviceDTO() { };
    }

    public async Task FetchDevice()
    {
        devicesDTO = await userService.GetDevices(user.Id);
        fetchDeviceFlag = true;
        addDeviceFlag = false;
        reasonPhrase = "";
    }

    public void ChooseDevice()
    {

        foreach (var dev in devicesDTO)
        {
            if (dev.Id == choosenDevice.Id)
            {
                choosenDevice.Name = dev.Name;
            }
        }
        reasonPhrase = "";
        fetchDeviceFlag = false;
    }

    public void AddDevice()
    {
        addDeviceFlag = true;
    }

    public async Task PostDevice()
    {
        responseMessage = await userService.PostNewDevice(user.Id, newDeviceName);
        reasonPhrase = responseMessage.ReasonPhrase;
        contentValue = await responseMessage.Content.ReadAsStringAsync();
        fetchDeviceFlag = false;
        newDeviceName = "";
    }
}